<?php

/**
 * Form builder; Configure the site's maintenance status.
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function maintenance_extended_form_system_site_maintenance_mode_alter(&$form, &$form_state, $form_id) {
  
  drupal_add_css(
    drupal_get_path('module', 'maintenance_extended') . '/css/maintenance_extended.css', 
    array(
      'group' => CSS_DEFAULT, 
    )
  );
  
  // available regions for the default theme
  $block_regions = system_region_list(
    variable_get('theme_default', 'bartik'),
    REGIONS_VISIBLE
  );

  // "none" region as the default selection
  $block_regions = $block_regions + array(BLOCK_REGION_NONE => BLOCK_REGION_NONE);
  
  // maintenance mode status
  $maintenance_mode = variable_get('maintenance_mode', 0);

  // pre-maintenance mode status
  $pre_maintenance_mode_on = variable_get('pre_maintenance_mode_on', 0);

  // copy maintenance_mode field; will be use later on
  $maintenance_mode = $form['maintenance_mode'];

  // copy maintenance_mode_message field; will be use later on
  $maintenance_mode_message = $form['maintenance_mode_message'];

  // remove maintenance_mode field from form
  unset($form['maintenance_mode']);

  // remove maintenance_mode_message from form
  unset($form['maintenance_mode_message']);
  
  // site is not running in maintenance mode
  if ($maintenance_mode['#default_value'] == 0) {

    /**
     * add pre-maintenance mode fields
     */ 
    
    $form['pre_maintenance_mode_container'] = array(
      '#markup' => '<h2 class="maintenance_extended title">' . t('Pre maintenance mode options') . '</h2>',
    );
  
    $form['pre_maintenance_mode_on'] = array(
      '#type' => 'checkbox',
      '#title' => t('Put site in pre maintenance mode'),
      '#default_value' => $pre_maintenance_mode_on,
      '#description' => t('When enabled, users will see a pre maintenance message.'),
    );
  
    if (!$pre_maintenance_mode_on) {
      $form['pre_maintenance_mode_message_date'] = array(
        '#type' => 'date_select', 
        '#title' => 'Set when to start displaying pre maintenance mode message', 
        '#description' => 'date', 
        '#date_year_range' => '0:+3',      
        '#required' => false,
        '#date_format' => 'M d Y h:i a',
        '#date_label_position' => 'within',
        '#default_value' => variable_get('pre_maintenance_mode_message_date', NULL),
      );
    }

    $form['pre_maintenance_mode_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Pre maintenance mode message'),
      '#default_value' => maintenance_extended_pre_maintenance_mode_message(),
      '#description' => t('Message to show visitors when the site is in maintenance mode.')
    );

    $form['pre_maintenance_mode_region'] = array(
      '#title' => t('Region for pre maintenance mode block'),
      '#type' => 'select',
      '#default_value' => variable_get('pre_maintenance_mode_region', NULL),
      '#empty_value' => BLOCK_REGION_NONE,
      '#options' => $block_regions,
    );  
    
  }

  $form['maintenance_mode_container'] = array(
    '#markup' => '<h2 class="maintenance_extended title">' . t('Maintenance mode options') . '</h2>',
  );

  // add copy of field maintenance_mode back to the form
  $form['maintenance_mode'] = $maintenance_mode;

  // add copy of field maintenance_mode_message back to the form
  $form['maintenance_mode_message'] = $maintenance_mode_message;
  
  if ($maintenance_mode['#default_value'] == 0) {
    $form['maintenance_mode_message_date_range_start'] = array(
      '#type' => 'date_select', 
      '#title' => 'Date and time to set site to maintenance mode', 
      '#description' => 'date', 
      '#date_year_range' => '0:+3',      
      '#required' => false,
      '#date_format' => 'M d Y h:i a',
      '#date_label_position' => 'within',
      '#default_value' => variable_get('maintenance_mode_message_date_range_start', NULL),
    );
  }
  
  $form['maintenance_mode_message_date_range_end'] = array(
    '#type' => 'date_select', 
    '#title' => 'Date and time to get site online', 
    '#description' => 'date', 
    '#date_year_range' => '0:+3',      
    '#required' => false,
    '#date_format' => 'M d Y h:i a',
    '#date_label_position' => 'within',
    '#default_value' => variable_get('maintenance_mode_message_date_range_end', NULL),
  );      
  
  // add a validation callback
  $form['#validate'][] = '_maintenance_extended_validate';
  
  // add a submit callback
  $form['#submit'][] = '_maintenance_extended_submit';  

}

/**
 * Validates date and make sure schedule event is in the future
 */
function _maintenance_extended_schedule_validate($element, &$form_state) {
  
  if (isset($form_state['values'][$element])) {
  
    $now = time();
  
    // get the UNIX timestamp
    $strtotime_date = strtotime(
      $form_state['values'][$element]
    );
    
    // set form error 
    if (
      !$strtotime_date // not a timestamp
      || // OR 
      (
        $strtotime_date // is a timestamp 
        && // AND 
        $strtotime_date < $now // user is trying to schedule in the past
      )
    ) 
    {
      form_set_error($element, t('Please provide a valid date for displayig pre maintenance mode message'));
    }
    else 
    {
      return $strtotime_date; // timestamp 
    }
  }

}

/**
 * Form validations and block actions
 */
function _maintenance_extended_validate(&$form, &$form_state) {
  
  // if site is set to maintenance_mode there is no need to validate or 
  // hold any of the extended values in {variable} table
  if ($form['maintenance_mode']['#value'] > 0) {
    $form_state['values']['pre_maintenance_mode_on'] = 0;
    $form_state['values']['pre_maintenance_mode_message_date'] = NULL;
    $form_state['values']['maintenance_mode_message_date_range_start'] = NULL;
    return;
  }
  
  // validate pre-maintenance mode message was schedule
  _maintenance_extended_schedule_validate('pre_maintenance_mode_message_date', $form_state);

  // maintenance mode start was schedule
  _maintenance_extended_schedule_validate('maintenance_mode_message_date_range_start', $form_state);
  
  // maintenance mode end was schedule
  _maintenance_extended_schedule_validate('maintenance_mode_message_date_range_end', $form_state);  
  
  if (
    isset($form['pre_maintenance_mode_on']) // pre_maintenance_mode_on is available 
    && //AND
    $form['pre_maintenance_mode_on']['#value'] > 0) // site is running on pre-maintenance mode
  {
    $form_state['values']['pre_maintenance_mode_message_date'] = NULL; // resent schedule
  }
  
}

function _maintenance_extended_submit(&$form, &$form_state) {
  
  $edit = array();  

  // Block status
  $edit['status'] = (isset($form_state['values']['pre_maintenance_mode_on'])) ? $form_state['values']['pre_maintenance_mode_on'] : 0;
  
  // Block region
  if (isset($form_state['values']['pre_maintenance_mode_region'])) {
    $edit['region'] = $form_state['values']['pre_maintenance_mode_region'];
  }
  
  // update block
  maintenance_extended_block_save('pre_maintenance_mode_message', $edit);

}

/** 
 * All things block
 */
 
/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 * https://api.drupal.org/api/drupal/modules!block!block.api.php/function/hook_block_info/7
 */
function maintenance_extended_block_info() {
  $blocks['pre_maintenance_mode_message'] = array(
    'info' => t('Pre maintenance mode message'),  // info: The name of the block.
    'cache' => DRUPAL_CACHE_PER_ROLE, // Block caching options (per role, per user, etc.)
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function maintenance_extended_block_view($delta = '') {
  switch ($delta) {
    case 'pre_maintenance_mode_message':
      $block['subject'] = t('Pre maintenance mode message');
      $block['content'] = array('#markup' => maintenance_extended_pre_maintenance_mode_message());
      break;
  }
  return $block;
}

function maintenance_extended_block_save($delta = '', $edit = array()) {

  $transaction = db_transaction();

  try {
    db_update('block')
      ->fields($edit)
      ->condition('module', 'maintenance_extended')
      ->condition('delta', $delta)
      ->execute();  
  }

  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('block', $e);
    throw $e;
  }

}

function maintenance_extended_go_offline() {

  try {
    // remove pre-maintenance mode message if active
    $edit = array(
      'status' => 0, // disable the block
    );
    
    maintenance_extended_block_save('pre_maintenance_mode_message', $edit);
    
    // go off-line
    variable_set('maintenance_mode', 1);

    // clean any possible left over
    variable_del('pre_maintenance_mode_on');
    variable_del('pre_maintenance_mode_message_date');
    variable_del('pre_maintenance_mode_message');
    variable_del('pre_maintenance_mode_region');
    variable_del('maintenance_mode_message_date_range_start');
  }
  
  catch (Exception $e) {
    return FALSE;
  }
  
  return TRUE;
}

function maintenance_extended_go_online() {

  try {
    // bring back the site online
    variable_set('maintenance_mode', 0);

    // clean any possible left over
    variable_del('pre_maintenance_mode_on');
    variable_del('pre_maintenance_mode_message_date');
    variable_del('pre_maintenance_mode_message');
    variable_del('pre_maintenance_mode_region');
    variable_del('maintenance_mode_message_date_range_start');
    variable_del('maintenance_mode_message_date_range_end');
  }
  
  catch (Exception $e) {
    return FALSE;
  }
  
  return TRUE;

}

/**
 * Implementation of hook_cron 
 * https://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_cron/7
 */
function maintenance_extended_cron() {
  
  $now = time();

  $edit = array();
  
  $pre_maintenance_mode_on = variable_get('pre_maintenance_mode_on', 0);
  
  $pre_maintenance_mode = variable_get('pre_maintenance_mode', 0);

  $pre_maintenance_mode_scheduled = variable_get('pre_maintenance_mode', 0); 

  $maintenance_mode = variable_get('maintenance_mode', 0);

  $pre_maintenance_mode_message_date = strtotime(variable_get('pre_maintenance_mode_message_date', NULL));
  
  $maintenance_mode_message_date_range_start = strtotime(variable_get('maintenance_mode_message_date_range_start', NULL));
  
  $maintenance_mode_message_date_range_end = strtotime(variable_get('maintenance_mode_message_date_range_end', NULL));
  
  // if check if site is running on maintenance mode and if is time 
  // to bring back the site online
  if (
    $maintenance_mode == 1 // site is running on maintenance mode 
    && // AND
    $now > $maintenance_mode_message_date_range_end// is time to come back online
  )
  {
    maintenance_extended_go_online();
    return;
  } 

  // if check if site is not running on maintenance mode and if is time 
  // to go off-line
  if (
    $maintenance_mode == 0 // site is not running on maintenance mode 
    && // AND
    $now > $maintenance_mode_message_date_range_start// is time to go off-line
  )
  {
    maintenance_extended_go_offline(); 
    return;
  }
  
  if (
    $maintenance_mode == 0 // site is not running on maintenance mode 
    &&
    $pre_maintenance_mode_on == 0 // site is not running on pre-maintenance mode
    && 
    $now > $pre_maintenance_mode_message_date // pre-maintenance mode has been schedule
  ) 
  {
    
    $pre_maintenance_mode_region = variable_get('pre_maintenance_mode_region', BLOCK_REGION_NONE);
    
    $edit = array(
      'status' => 1, // enable the block
      'region' => $pre_maintenance_mode_region, // set the region
    );

    maintenance_extended_block_save('pre_maintenance_mode_message', $edit);
    
    variable_set('pre_maintenance_mode_on', 1);

    variable_set('pre_maintenance_mode_message_date', NULL);
    
    return;
    
  }

}

/** 
 * All things email
 */

/**
 * Implement hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 * 
 * taken from: http://drupalcode.org/project/examples.git/blob_plain/refs/heads/7.x-1.x:/email_example/email_example.module
 */
function maintenance_extended_mail($key, &$message, $params) {

  global $user;

  // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'pre_maintenance_mode_enable':
      $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name sent you the following message:', array('@name' => $user->name), $options);
      
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);
      break;
  }
  
}

/**
 * Sends an e-mail.
 *
 * @param $form_values
 *   An array of values from the contact form fields that were submitted.
 *   There are just two relevant items: $form_values['email'] and
 *   $form_values['message'].
 */
function maintenance_extended_send($form_values) {

  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'maintenance_extended';
  
  // what action to takes
  $key = $form_values['key'];

  // Specify 'to' addresses.
  $to = $form_values['email'];
  
  // Specify 'from' addresses
  $from = $form_values['from'];

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = $form_values;

  // The language of the e-mail. This will one of three values:
  // * user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // * global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // * language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  
  if ($result['result'] == TRUE) {
    drupal_set_message(t('Your message has been sent.'));
  }
  else {
    watchdog($module, t('There was a problem sending message.'), WATCHDOG_ERROR);
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }

}

function maintenance_extended_pre_maintenance_mode_message() {
  return variable_get('pre_maintenance_mode_message', t('@site is currently is currently under pre maintenance.', array('@site' => variable_get('site_name', 'Drupal'))));
}
